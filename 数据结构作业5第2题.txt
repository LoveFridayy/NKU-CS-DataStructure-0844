#include <iostream>
using namespace std;

template<typename T>
class Node {
public:
    T data;
    Node* next;
    Node(T value) : data(value), next(nullptr) {}
};

template<typename T>
class hashChainsWithTail {
private:
    Node<T>* tail;
    int size;
    Node<T>** table;

public:
    hashChainsWithTail(int n) : size(n) {
        table = new Node<T>*[size];
        tail = new Node<T>(T());
        for (int i = 0; i < size; i++) {
            table[i] = tail;
        }
    }

    ~hashChainsWithTail() {
        for (int i = 0; i < size; i++) {
            Node<T>* current = table[i];
            while (current != tail) {
                Node<T>* temp = current;
                current = current->next;
                delete temp;
            }
        }
        delete tail;
        delete[] table;
    }

    int hash(const T& t) {
        return t % size;
    }

    void insert(T value) {
        int index = hash(value);
        Node<T>* newNode = new Node<T>(value);

        Node<T>* current = table[index];
        Node<T>* prev = tail;

        while (current != tail && current->data < value) {
            prev = current;
            current = current->next;
        }

        prev->next = newNode;
        newNode->next = current;

        if (table[index] == tail) {
            table[index] = newNode;
        }
    }

    void erase(T value) {
        int index = hash(value);

        Node<T>* current = table[index];
        Node<T>* prev = tail;

        while (current != tail && current->data < value) {
            prev = current;
            current = current->next;
        }


        if (current != tail && current->data == value) {
            prev->next = current->next;
            delete current;

            if (table[index] == current) {
                table[index] = tail;
            }
        } else {
            cout << "该元素不存在" << endl;
        }
    }

    void output() {
        cout<<"chain start"<<endl;
        for (int i = 0; i < size; i++) {
            cout << "Index " << i << ": ";
            Node<T>* current = table[i];
            while (current != tail) {
                cout << current->data << " ";
                current = current->next;
            }
            cout << endl;
        }
    }
};

int main() {
    hashChainsWithTail<int> hashTable(10);

    hashTable.insert(5);
    hashTable.insert(15);
    hashTable.insert(1);
    hashTable.insert(8);
    hashTable.output();


    hashTable.erase(7);
    hashTable.output();

    hashTable.erase(5);
    hashTable.output();

    return 0;
}