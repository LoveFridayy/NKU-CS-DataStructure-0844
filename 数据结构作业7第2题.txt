#include <iostream>
#include <queue>
#include <unordered_map>
#include <string>

using namespace std;

struct HuffmanNode {
    char character;
    int frequency;
    HuffmanNode* left;
    HuffmanNode* right;

    HuffmanNode(char ch, int freq) : character(ch), frequency(freq), left(nullptr), right(nullptr) {}
};

struct Compare {
    bool operator()(HuffmanNode* left, HuffmanNode* right) {
        return left->frequency > right->frequency;
    }
};

void generateHuffmanCodes(HuffmanNode* root, const string& str, unordered_map<char, string>& codes) {
    if (!root) return;

    if (!root->left && !root->right) {
        codes[root->character] = str;
    }

    generateHuffmanCodes(root->left, str + "0", codes);
    generateHuffmanCodes(root->right, str + "1", codes);
}

string compress(const string& input) {
    unordered_map<char, int> frequency;
    for (char ch : input) {
        frequency[ch]++;
    }

    priority_queue<HuffmanNode*, vector<HuffmanNode*>, Compare> minHeap;
    for (auto pair : frequency) {
        minHeap.push(new HuffmanNode(pair.first, pair.second));
    }

    while (minHeap.size() > 1) {
        HuffmanNode* left = minHeap.top(); minHeap.pop();
        HuffmanNode* right = minHeap.top(); minHeap.pop();

        HuffmanNode* combined = new HuffmanNode('\0', left->frequency + right->frequency);
        combined->left = left;
        combined->right = right;

        minHeap.push(combined);
    }

    unordered_map<char, string> huffmanCodes;
    generateHuffmanCodes(minHeap.top(), "", huffmanCodes);

    string encodedString;
    for (char ch : input) {
        encodedString += huffmanCodes[ch];
    }

    return encodedString;
}

string decompress(const string& encodedString, HuffmanNode* root) {
    string decodedString;
    HuffmanNode* currentNode = root;

    for (char bit : encodedString) {
        if (bit == '0') {
            currentNode = currentNode->left;
        } else {
            currentNode = currentNode->right;
        }

        if (!currentNode->left && !currentNode->right) {
            decodedString += currentNode->character;
            currentNode = root;
        }
    }

    return decodedString;
}

int main() {
    const string data = "aaaaaabbbccccccccddeeeeeeeeeeffff";

    string compressed = compress(data);
    cout << "压缩后的数据: " << compressed << endl;

    HuffmanNode* root = new HuffmanNode('\0', 0);
    unordered_map<char, HuffmanNode*> nodes;
    for (char ch : data) {
        if (nodes.find(ch) == nodes.end()) {
            nodes[ch] = new HuffmanNode(ch, 1);
        } else {
            nodes[ch]->frequency++;
        }
    }

    priority_queue<HuffmanNode*, vector<HuffmanNode*>, Compare> minHeap;
    for (auto pair : nodes) {
        minHeap.push(pair.second);
    }

    while (minHeap.size() > 1) {
        HuffmanNode* left = minHeap.top(); minHeap.pop();
        HuffmanNode* right = minHeap.top(); minHeap.pop();

        HuffmanNode* combined = new HuffmanNode('\0', left->frequency + right->frequency);
        combined->left = left;
        combined->right = right;

        minHeap.push(combined);
    }

    root = minHeap.top();

    string decompressed = decompress(compressed, root);
    cout << "解压缩后的数据: " << decompressed << endl;

    return 0;
}